[org 0x100]
jmp start
buffer: times 2000 dw 0

store_buffer:
push bp
mov bp,sp
pusha
mov ax,0xb800
mov ds,ax
mov si,0
mov ax,cs
mov es,ax
mov di,buffer
mov cx,2000
cld
rep movsw
popa
pop bp
ret

load_buffer:
push bp
mov bp,sp
pusha
mov ax,0xb800
mov es,ax
mov di,0
mov ax,cs
mov ds,ax
mov si,buffer
mov cx,2000
cld
rep movsw
popa
pop bp
ret

clrscr:		
mov ax, 0xb800
mov es, ax 
mov di, 0 
nextloc:
mov word [es:di], 0x0720 ; clear next char on screen 
add di, 2 ; move to next screen location 
cmp di, 4000 ; has the whole screen cleared 
jne nextloc ; if no clear next position  
ret

kbisr:
push ax
in al,0x60
cmp al, 0x4d
jne n1
call store_buffer
call clrscr
jmp exit
n1:
cmp al,0xcd
jne exit
call delay
call load_buffer
exit:
mov al,0x20
out 0x20,al
pop ax
iret

delay:
mov cx, 0xffff
d:
loop d
ret

start:
mov ax,0
mov es,ax
cli
mov word[es:9*4],kbisr
mov [es:9*4+2],cs 
sti

mov ax,0x4c00
int 0x21
