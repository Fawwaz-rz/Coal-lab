[org 0x100]
jmp start

msg1: db 'i am activi'
m1:db 'a count'
a: dw 0
e: dw 0
i: dw 0
o :dw 0
u: dw 0

clrscr:		
mov ax, 0xb800
mov es, ax 
mov di, 0 
nextloc:
mov word [es:di], 0x0720 ; clear next char on screen 
add di, 2 ; move to next screen location 
cmp di, 4000 ; has the whole screen cleared 
jne nextloc ; if no clear next position  
ret

printnum:
push bp
mov bp, sp
push es
push ax
push bx
push cx
push dx
push di
mov ax, 0xb800
mov es, ax ; point es to video base
mov ax, [bp+4] ; load number in ax
mov bx, 10 ; use base 10 for division
mov cx, 0 ; initialize count of digits
nextdigit: mov dx, 0 ; zero upper half of dividend
div bx ; divide by 10
add dl, 0x30 ; convert digit into ascii value
push dx ; save ascii value on stack
inc cx ; increment count of values
cmp ax, 0 ; is the quotient zero
jnz nextdigit ; if no divide it again
mov di, 400 ; point di to top left column
nextpos: pop dx ; remove a digit from the stack
mov dh, 0x07 ; use normal attribute
mov [es:di], dx ; print char on screen
add di, 2 ; move to next screen location
loop nextpos ; repeat for all digits on stack
pop di
pop dx
pop cx
pop bx
pop ax
pop es
pop bp
ret 2

count:
push bp
mov bp,sp
push es
cld

;init:
mov di,[bp+6]
mov cx,[bp+4]
mov bx,-1
;ret

a1:
mov al,'a'
repne scasb
;inc di
inc bx
cmp cx,0
jne a1
mov word[a],bx
push word[a]
call printnum
pop es
pop bp
ret 4



start:
call clrscr
mov ah,0x13
mov al,1
mov bh,0
mov bl,7
mov dx,0x010A
mov cx,12
push cs
pop es
mov bp,msg1
int 0x10
mov ax,msg1
push ax
mov ax,12
push ax
mov ah,0x13
mov al,1
mov bh,0
mov bl,7
mov dx,0x020A
mov cx,7
push cs
pop es
mov bp,m1
int 0x10
call count

mov ax,0x4c00
int 0x21