[org 0x100]
jmp start
pos: dw 2000
flag: dw 0
row: dw 12
col: dw 40
score: dw 0
oldkb: dd 0
oldtimer: dd 0
clrscr:	
pusha	
mov ax, 0xb800
mov es, ax 
mov di, 0 
nextloc:
mov word [es:di], 0x0720 ; clear next char on screen 
add di, 2 ; move to next screen location 
cmp di, 4000 ; has the whole screen cleared 
jne nextloc ; if no clear next position  
popa
ret

kbisr:
pusha
mov ax,0xb800
mov es,ax
in al,0x60
cmp al,0x48 ;up key
jne n1
sub word[cs:pos],160
dec word[cs:row]
cmp word[cs:row],0
jne next
mov word[cs:flag],1
jmp exit
next:
call clrscr
mov di,[cs:pos]
mov byte[es:di],'*'
jmp exit1
n1:
cmp al,0x4d  ;rightkey
jne n2
add word[cs:pos],2
inc word[cs:col]
cmp word[cs:col],80
je exit
;mov word[cs:flag],0
call clrscr
mov di,[cs:pos]
mov byte[es:di],'*'
jmp exit1
n2:
cmp al,0x50 ;down key
jne n3
add word[cs:pos],160
inc word[cs:row]
cmp word[cs:row],25
je exit
;mov word[cs:flag],0
call clrscr
mov di,[cs:pos]
mov byte[es:di],'*'
jmp exit1
n3:
cmp al,0x4b ;leftkey
jne exit1
sub word[cs:pos],2
dec word[cs:col]
cmp word[cs:col],0
je exit
;mov word[cs:flag],0
call clrscr
mov di,[cs:pos]
mov byte[es:di],'*'
jmp exit1

exit:
mov word[cs:flag],1

exit1:
;mov al,0x20
;out 0x20,al
popa
jmp far[cs:oldkb]

timer:
push ax
cmp word[cs:flag],0
jne skip
inc word[cs:score]
skip:
mov al,0x20
out 0x20,al
pop ax
iret

printnum:
call clrscr 
push bp
mov bp, sp
push es
push ax
push bx
push cx
push dx
push di
mov ax, 0xb800
mov es, ax ; point es to video base
mov ax, [bp+4] ; load number in ax
mov bx, 10 ; use base 10 for division
mov cx, 0 ; initialize count of digits
nextdigit: mov dx, 0 ; zero upper half of dividend
div bx ; divide by 10
add dl, 0x30 ; convert digit into ascii value
push dx ; save ascii value on stack
inc cx ; increment count of values
cmp ax, 0 ; is the quotient zero
jnz nextdigit ; if no divide it again
mov di, 0 ; point di to top left column
nextpos: pop dx ; remove a digit from the stack
mov dh, 0x07 ; use normal attribute
mov [es:di], dx ; print char on screen
add di, 2 ; move to next screen location
loop nextpos ; repeat for all digits on stack
pop di
pop dx
pop cx
pop bx
pop ax
pop es
pop bp
ret 2
unhook:
pusha
mov ax,[oldkb]
mov bx,[oldkb+2]
cli
mov word [es:9*4],ax
mov [es:9*4+2],bx
mov ax,[oldtimer]
mov bx,[oldtimer+2]
mov word [es:8*4],ax
mov [es:8*4+2],bx
sti
popa
ret
start:
call clrscr
mov ax,0xb800
mov es,ax
mov di,[cs:pos]
mov byte[es:di],'*'
mov ax,0
mov es,ax
mov ax,[es:9*4]
mov [oldkb],ax
mov ax,[es:9*4+2]
mov [oldkb+2],ax
mov ax,[es:8*4]
mov [oldtimer],ax
mov ax,[es:8*4+2]
mov [oldtimer+2],ax
cli
mov word [es:9*4],kbisr
mov [es:9*4+2],cs
mov word [es:8*4],timer
mov [es:8*4+2],cs
sti
l1:
cmp word[flag],1
jne l1
call unhook
call clrscr
push word[score]
call printnum
mov ax,0x4c00
int 0x21