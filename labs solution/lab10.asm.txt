; display a tick count while the left shift key is down 
[org 0x0100] 
 jmp start 
seconds: dw 0 
timerflag: dw 0 
oldkb: dd 0 
seccount:dw 1
keytypedcount:dw 0
asterickprint:db 0
ypos:db 2
printnum: push bp 
 mov bp, sp 
 push es 
 push ax 
 push bx 
 push cx 
 push dx 
 push di 
 mov ax, 0xb800 
 mov es, ax ; point es to video base 
 mov ax, [bp+4] ; load number in ax 
 mov bx, 10 ; use base 10 for division 
 mov cx, 0 ; initialize count of digits 
nextdigit: mov dx, 0 ; zero upper half of dividend 
 div bx ; divide by 10 
 add dl, 0x30 ; convert digit into ascii value 
 push dx ; save ascii value on stack 
 inc cx ; increment count of values 
 cmp ax, 0 ; is the quotient zero 
 jnz nextdigit ; if no divide it again 
 mov di, 140 ; point di to 70th column 
nextpos: pop dx ; remove a digit from the stack 
 mov dh, 0x07 ; use normal attribute 
 mov [es:di], dx ; print char on screen 
 add di, 2 ; move to next screen location 
 loop nextpos ; repeat for all digits on stack 
 pop di 
 pop dx 
 pop cx 
 pop bx 
 pop ax
 pop es 
 pop bp 
 ret 2


 
 printastericks:
 
 mov ax,[cs:keytypedcount]
 mov bl,4
 div bl
 
 mov byte[cs:asterickprint],al


mov dl,[cs:asterickprint]
 l4:mov ax, 0xb800 
 mov es, ax ; point es to video base 
 mov al, 80 ; load al with columns per row 
 mov bl,[ypos]
 mul bl ; multiply with y position 
 add ax, 78 ; add x position 
 shl ax, 1 ; turn into byte offset 
 mov di,ax ; point di to required location
 mov cx, 1 ; load length of string in cx 
 mov ah, 0x07
 nextchar: mov al, 0x2a ; load next char of string 
 mov [es:di], ax ; show this char on screen 
 add di, 2 ; move to next screen location
 loop nextchar
inc byte[ypos]
dec dl
cmp dl,0
jne l4
jmp l2 
 
 
kbisr: push ax 
 in al, 0x60 ; read char from keyboard port 
 
 cmp al, 0x9D ; has the left shift pressed 
 jb nextcmp ; no, try next comparison
 inc word[cs:keytypedcount]
nextcmp: 
 mov word [cs:timerflag], 1
 jmp exit ; leave the interrupt routine 
nomatch: pop ax 
 jmp far [cs:oldkb] ; call original ISR 
exit: 


mov al, 0x20 
 out 0x20, al ; send EOI to PIC 
 pop ax 
 iret ; return from interrupt 
; timer interrupt service routine 








timer: push ax 
 cmp word [cs:timerflag], 1 ; is the printing flag set 
 jne skipall ; no, leave the ISR 
 
 add word [cs:seconds],1 ; increment tick count 
 
 
 cmp word [cs:seconds],18
 jne l2
mov word[cs:seconds],0 
 inc word[cs:seccount]
 cmp word[cs:seccount],5
 jne l2
jmp printastericks
 l2:
 push word [cs:seccount] 
 call printnum ; print tick count 
skipall:


mov al, 0x20 
 out 0x20, al ; send EOI to PIC 
 pop ax 
 iret ; return from interrupt
 
start: xor ax, ax 
 mov es, ax ; point es to IVT base 
 mov ax, [es:9*4] 
 mov [oldkb], ax ; save offset of old routine 
 mov ax, [es:9*4+2] 
 mov [oldkb+2], ax ; save segment of old routine 
 cli ; disable interrupts 
 mov word [es:9*4], kbisr ; store offset at n*4 
 mov [es:9*4+2], cs ; store segment at n*4+2 
 mov word [es:8*4], timer ; store offset at n*4 
 mov [es:8*4+2], cs ; store segment at n*4+ 
 sti ; enable interrupts  
 mov ax, 0x3100 ; terminate and stay resident 
 int 0x21 




















; ; timer interrupt service routine 
; timer: push ax 
 ; inc word [cs:tickcount]; increment tick count 
 ; push word [cs:tickcount] 
 ; call printnum ; print tick count 
 ; mov al, 0x20 
 ; out 0x20, al ; end of interrupt 
 ; pop ax 
 ; iret ; return from interrupt 
; start: xor ax, ax 
 ; mov es, ax ; point es to IVT base 
 ; cli ; disable interrupts 
 ; mov word [es:8*4], timer; store offset at n*4 
 ; mov [es:8*4+2], cs ; store segment at n*4+2 
 ; sti ; enable interrupts 
 ; mov dx, start ; end of resident portion 
 ; add dx, 15 ; round up to next para 
 ; mov cl, 4 
 ; shr dx, cl ; number of paras 
 ; mov ax, 0x3100 ; terminate and stay resident 
 ; int 0x21