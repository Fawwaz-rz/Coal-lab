[org 0x100] 
 jmp start 
oldisr: dd 0 ; space for saving old isr 
; keyboard interrupt service routine
stra:db 'Hi!You pressed a'
strb:db 'Hi!You pressed b'
strW:db 'hi, you entered wrong credentials'


clrscr: push es 
 push ax 
 push cx 
 push di 
 mov ax, 0xb800 
 mov es, ax ; point es to video base 
 xor di, di ; point di to top left column 
 mov ax, 0x0720 ; space char in normal attribute 
 mov cx, 2000 ; number of screen locations 
 cld ; auto increment mode 
 rep stosw ; clear the whole screen 
 pop di
 pop cx 
 pop ax 
 pop es 
 ret 
 
kbisr: push ax 
 push es 
 mov ax, 0xb800 
 mov es, ax ; point es to video memory 
 in al, 0x60 ; read a char from keyboard port 
 cmp al, 0x1E ; is the key left shift 
 jne nextcmp ; no, try next comparison 
 mov ah, 0x13 ; service 13 - print string 
 mov al, 1 ; subservice 01 – update cursor 
 mov bh, 0 ; output on page 0 
 mov bl, 7 ; normal attrib 
 mov dx, 0x0A03 ; row 10 column 3 
 mov cx, 16 ; length of string 
 push cs 
 pop es ; segment of string 
 mov bp, stra ; offset of string 
 int 0x10 
 jmp nomatch ; leave interrupt routine 
 
nextcmp: cmp al, 0x30 ; is the key right shift 
 jne nomatch1 ; no, leave interrupt routine 
 mov ah, 0x13 ; service 13 - print string 
 mov al, 1 ; subservice 01 – update cursor 
 mov bh, 0 ; output on page 0 
 mov bl, 7 ; normal attrib 
 mov dx, 0x0A03 ; row 10 column 3 
 mov cx, 16 ; length of string 
 push cs 
 pop es ; segment of string 
 mov bp, strb ; offset of string 
 int 0x10 
 jmp nomatch
 nomatch1:
 cmp al, 0x30 ; is the key right shift 
 ; no, leave interrupt routine 
 mov ah, 0x13 ; service 13 - print string 
 mov al, 1 ; subservice 01 – update cursor 
 mov bh, 0 ; output on page 0 
 mov bl, 7 ; normal attrib 
 mov dx, 0x0A03 ; row 10 column 3 
 mov cx, 33 ; length of string 
 push cs 
 pop es ; segment of string 
 mov bp, strW ; offset of string 
 int 0x10 
 
nomatch: ; mov al, 0x20 
 ; out 0x20, al 
 pop es 
 pop ax 
 jmp far [cs:oldisr] ; call the original ISR 
 ; iret 
 
start: 
mov ah,0
int 0x16
call clrscr


xor ax, ax 
 mov es, ax ; point es to IVT base 
 mov ax, [es:9*4] 
 mov [oldisr], ax ; save offset of old routine 
 mov ax, [es:9*4+2] 
 mov [oldisr+2], ax ; save segment of old routine 
 cli ; disable interrupts 
 mov word [es:9*4], kbisr ; store offset at n*4 
 mov [es:9*4+2], cs ; store segment at n*4+2 
 sti ; enable interrupts 
l1: mov ah, 0 ; service 0 – get keystroke 
 int 0x16 ; call BIOS keyboard service 
 cmp al, 27 ; is the Esc key pressed 
 jne l1 
 
 mov ax,0x4c00
 int 0x21